=begin

ruby 1.9.2
Sat Nov 26, 2011

Problem 12:

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

=end

require 'set'

# Takes a positive integer and returns a Set containing 
# all the positive factors of that integer.
def factors_of number
  factors = Set.new

  return factors.add(1) if number == 1

  # I'm assuming only half of the numbers need to
  # be tested. Could be wrong on this!
  1.upto(number/2).each do |divisor| 
    if number % divisor == 0 
      if factors.add? divisor 
        factors.add number / divisor 
      else
        # When we can't add a divisor to our
        # set of factors, then we've found all the factors
        break
      end
    end
  end

  factors
end
  
minimum_number_of_factors = 500

1.upto(100_000_000).inject do |triangle_number, n|
  if factors_of(triangle_number).length > minimum_number_of_factors 
    puts triangle_number 
    exit
  end

  triangle_number + n
end
